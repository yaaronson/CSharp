public class Node
{

    public int data;
    public Node next;

}

class toStrings
{

    public String toString(Node one)
    {

        if (one == null)
        {

            return " ";
        }

        return one.data + toString(one.next);
    }


}




public class Nodes
{

    public int data;
    public Nodes [] next;

}

class BinaryLL
{
    public bool Search(Nodes one, int two)
    {

        if (one == null)
        { 
            return false;
        }

        for (int i = 0; i < one.next.Length; i++) { 
        
            if (two == one.next[i].data)
            {
                return true;
            }
        }
        for (int i = 0; i < one.next.Length; i++)
        {
            if (Search(one.next[i], two) == true) {

                return true;
            
            }
        }
        return false;

    }
}




//--------- Question 3


public class Node2
{

    public int data;
    public Node2 next;

}

class CirclyLL
{

    public int Size(Node2 current, Node2 head = null, int amountOfNodes = 1)
    {

        if (head == current)
        {
            return amountOfNodes;
        }

        if (head == null)
        {
            head = current;
        }

        return Size(current.next, head, amountOfNodes + 1);
    }
}


//--Question 4


class RecursiveShellSort
{
    public void ShellSort(int[] arr, int split)
    {
        if (split > 0)
        {
            for (int i = split; i < arr.Length; i++)
            {
                int temp = arr[i];
                int j = i;

                while (j >= split && arr[j - split] > temp)
                {
                    arr[j] = arr[j - split];
                    j -= split;
                }

                arr[j] = temp;
            }

            ShellSort(arr, split / 2);
        }
    }

}




//----

public class Solution
{
    public int MaxProfit(int[] prices)
    {

    int max = 0;

      for (int i = 0; i < prices.Length; i++){
            for (int j = i + 1; j < prices.Length; j++){
                if (prices[j] - prices[i] > max) {
                    max = prices[j] - prices[i];
                
                }
            }
        }
        return max;
    }
}